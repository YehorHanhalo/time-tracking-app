{"version":3,"sources":["query/query.js","components/TaskItem/TaskItem.tsx","components/TaskList/TaskList.tsx","utils/getTimeFromMillisec.tsx","utils/getTimeFromMinutes.tsx","utils/index.js","components/TimerecordItem/TimerecordItem.tsx","components/TimerecordList/TimerecordList.tsx","components/Timer/Timer.js","components/CurrentTask/CurrentTask.tsx","App.tsx","index.tsx"],"names":["TIMERECORD_INFO","getTasks","gql","startTimer","stopTimer","useStyles","makeStyles","theme","root","padding","spacing","background","border","borderRadius","marginBottom","selected","TaskItem","id","name","setCurrentTaskId","isCurrentTask","classes","handleClick","useCallback","e","ListItem","onClick","className","clsx","memo","header","textAlign","TaskList","tasks","currentTaskId","Card","Typography","List","map","task","index","pad","value","paddedValue","String","length","padStart","getTimeFromMillisec","time","hours","Math","floor","mins","secs","getTimeFromMinutes","width","TimerecordItem","enddate","notes","startdate","timespent","trackedBy","timeFormat","startDate","moment","format","endDate","toString","TimerecordList","timerecords","taskTotalTimespent","Box","contact","fullname","Timer","isStartedTimer","shouldRefreshTimer","setShouldRefreshTimer","stopWatch","useStopwatch","interval","milliseconds","start","stop","restart","useEffect","component","variant","buttons","display","justifyContent","marginRight","CurrentTask","currentTask","handleStopTimerById","handleStartTimerById","activeTimer","useState","setIsStartedTimer","handleStartButtonClick","handleStopButtonClick","isStopButtonDisabled","running","isStartButtonDisabled","Grid","Button","disabled","App","enqueueSnackbar","useSnackbar","setTasks","useQuery","data","loading","getTasksError","error","refetch","useMutation","startTimerById","startTimerError","stopTimerById","stopTimerError","message","useMemo","find","setActiveTimer","variables","input","taskid","then","startTimerecord","p","container","item","xs","style","position","top","left","client","ApolloClient","uri","process","headers","Authorization","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.ec904cec.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nconst TIMERECORD_INFO = `\n  timespent\n  startdate\n  enddate\n  running\n  notes\n  task{\n    id\n  }\n  contact {\n    id\n    fullname\n  }\n`\n\nexport const getTasks = gql`\nquery GET_TASKS {\n  tasks(\n    input: {\n      limit: 10\n      orderby: { name: asc }\n      where: {\n          displaytype:{NEQ:heading},\n          status: { EQ: active } }\n    }\n  ) {\n    id\n    name\n    timerecords {\n      ${TIMERECORD_INFO}\n    }\n    taskTotalTimespent: timespent\n  }\n}\n`\n\nexport const startTimer = gql`\nmutation START_TIMERECORD($input: StartTimerecordInput) {\n  startTimerecord(input: $input) {\n    ${TIMERECORD_INFO}\n  }\n}\n`\n\nexport const stopTimer = gql`\nmutation STOP_TIMERECORD($input: StartTimerecordInput) {\n  stopTimerecord(input: $input) {\n   ${TIMERECORD_INFO}\n  }\n}\n`\n","import { FC, memo, useCallback, MouseEvent } from 'react'\nimport ListItem from '@material-ui/core/ListItem'\nimport { makeStyles, Theme } from '@material-ui/core/styles'\nimport clsx from 'clsx';\n\ninterface TaskItemProps {\n    id: string;\n    name: string;\n    isCurrentTask: boolean;\n    setCurrentTaskId(id: string): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    '&:hover': {\n        background: '#B6F3ED',\n    },\n    border: '1px solid #B6F3ED',\n    borderRadius: 4,\n    '&:not(:last-child)': {\n      marginBottom: 10,\n    }\n  },\n  selected: {\n        background: '#B6F3ED',\n    },\n}));\n\nconst TaskItem: FC<TaskItemProps> = ({ id, name, setCurrentTaskId, isCurrentTask }) => {\n    const classes = useStyles()\n\n    const handleClick = useCallback(\n        (e: MouseEvent<HTMLElement>) => {\n            setCurrentTaskId(id)\n        },\n        [setCurrentTaskId, id],\n    )\n\n    return (\n        <ListItem\n            onClick={handleClick}\n            className={clsx(classes.root, isCurrentTask && classes.selected)}\n        >\n            {name}\n        </ListItem>\n    )\n}\n\nexport default memo(TaskItem)","import { FC, memo } from 'react'\nimport List from '@material-ui/core/List'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, Theme } from '@material-ui/core/styles'\nimport TaskItem from '../TaskItem'\nimport { ITask } from '../../interfaces'\n\ninterface TaskListProps {\n  tasks: ITask[];\n  currentTaskId: string;\n  setCurrentTaskId(id: string): void;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    background: 'rgb(205, 242, 238, 0.1)',\n    marginBottom: theme.spacing(2),\n  },\n  header: {\n    textAlign: 'center',\n  }\n}))\n\nconst TaskList: FC<TaskListProps> = ({ tasks, setCurrentTaskId, currentTaskId }) => {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <Typography className={classes.header}>Tasks</Typography>\n      <List>\n        {tasks.map((task, index) => {\n          const isCurrentTask = currentTaskId === task.id\n          return (<TaskItem\n            key={task.id}\n            id={task.id}\n            name={`${index+1}. ${task.name}`}\n            setCurrentTaskId={setCurrentTaskId}\n            isCurrentTask={isCurrentTask}\n          />)\n        })}\n      </List>\n    </Card>\n  )\n}\n\nexport default memo(TaskList)\n","const pad = (value: number) => {\n    const paddedValue = String(value).length <= 2 ? 2 : String(value).length\n    return String(value).padStart(paddedValue, '0');\n  };\n\n  const getTimeComponents = (time: number) => {\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  };\n\nexport default getTimeComponents","const pad = (value: number) => {\n    const paddedValue = String(value).length <= 2 ? 2 : String(value).length\n    return String(value).padStart(paddedValue, '0');\n  };\n\n  const getTimeComponents = (time: number) => {\n    const hours = pad(Math.floor((time % (60 * 24)) / (60)));\n    const mins = pad(Math.floor((time % (60))));\n\n    return { hours, mins };\n  };\n\nexport default getTimeComponents","import _getTimeFromMillisec from './getTimeFromMillisec'\nimport _getTimeFromMinutes from './getTimeFromMinutes'\n\nexport const getTimeFromMillisec = _getTimeFromMillisec\nexport const getTimeFromMinutes = _getTimeFromMinutes","import { FC, memo } from 'react'\nimport moment from 'moment'\nimport ListItem from '@material-ui/core/ListItem'\nimport Card from '@material-ui/core/Card'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, Theme } from '@material-ui/core/styles'\nimport { getTimeFromMinutes } from '../../utils'\n\ninterface TimerecordItemProps {\n  enddate: string;\n  notes: string;\n  startdate: string;\n  timespent: number;\n  trackedBy: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    width: '100%',\n  },\n}));\n\nconst TimerecordItem: FC<TimerecordItemProps> = ({enddate, notes, startdate, timespent, trackedBy}) => {\n    const classes = useStyles()\n\n    const timeFormat = \"hh:mm DD MMM\"\n    const startDate = moment(startdate).format(timeFormat)\n    const endDate = moment(enddate).format(timeFormat)\n\n    const { hours, mins } = getTimeFromMinutes(timespent)\n\n    return (\n        <ListItem>\n            <Card className={classes.root}>\n                <Typography>Start: {startDate.toString()}</Typography>\n                <Typography>End: {endDate.toString()}</Typography>\n                <Typography>Time tracked: {hours}:{mins}</Typography>\n                <Typography>Notes: {notes}</Typography>\n                <Typography>Tracked by: {trackedBy}</Typography>\n            </Card>\n        </ListItem>\n    )\n}\n\nexport default memo(TimerecordItem)","import { FC, memo } from 'react'\nimport List from '@material-ui/core/List'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TimerecordItem from '../TimerecordItem'\nimport { ITimerecord } from '../../interfaces'\n\ninterface TimerecordListProps {\n    timerecords: ITimerecord[];\n    taskTotalTimespent: number;\n}\n\nconst useStyles = makeStyles(() => ({\n  header: {\n    textAlign: 'center',\n  }\n}))\n\nconst TimerecordList: FC<TimerecordListProps> = ({ timerecords, taskTotalTimespent }) => {\n  const classes = useStyles()\n\n  if (timerecords.length === 0) {\n    return (\n        <Box className={classes.header}>\n            <Typography>Time Records</Typography>\n            <Typography>This task has no time records</Typography>\n        </Box>\n    )\n  }\n\n  return (\n    <Box>\n      <Typography className={classes.header}>Time Records</Typography>\n      <List>\n        {timerecords.map(({enddate, notes, contact, startdate, timespent}) => (\n          <TimerecordItem\n            key={startdate}\n            enddate={enddate}\n            notes={notes}\n            trackedBy={contact.fullname}\n            startdate={startdate}\n            timespent={timespent}\n          />\n        ))}\n      </List>\n      <Typography>Total time spent: {taskTotalTimespent}min</Typography>\n    </Box>\n  )\n}\n\nexport default memo(TimerecordList)\n","import { memo, useEffect } from 'react';\nimport useStopwatch from \"use-stopwatch-hook\";\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles'\nimport { getTimeFromMillisec } from '../../utils'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    textAlign: 'center',\n  },\n}));\n\nconst Timer = ({ isStartedTimer, isCurrentTask, shouldRefreshTimer, setShouldRefreshTimer }) => {\n  const classes = useStyles()\n  const stopWatch = useStopwatch({ interval: 1000 });\n\n  const milliseconds = stopWatch[0]\n  const start = stopWatch[2]\n  const stop = stopWatch[4]\n  const restart = stopWatch[5]\n\n  useEffect(() => {\n    isStartedTimer ? start() : stop()\n  }, [isStartedTimer, start, stop])\n\n  useEffect(() => {\n    if (shouldRefreshTimer) {\n      restart()\n      setShouldRefreshTimer(false)\n    }\n  }, [shouldRefreshTimer, setShouldRefreshTimer, restart])\n\n  const { hours, mins, secs } = getTimeFromMillisec(milliseconds)\n\n    return (\n      <Box className={classes.root}>\n        <Typography\n          component=\"span\"\n          variant=\"h2\"\n        >\n          {isCurrentTask ? `${hours}:${mins}:${secs}` : '00:00:00'}\n        </Typography>\n      </Box>\n    )\n}\n\nexport default memo(Timer)","import { FC, memo, useCallback, useState } from 'react';\nimport Card from '@material-ui/core/Card'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, Theme } from '@material-ui/core/styles'\nimport TimerecordList from '../TimerecordList'\nimport Timer from '../Timer'\nimport { ITask, ITimerecord } from '../../interfaces'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    background: 'rgb(205, 242, 238, 0.1)',\n    '& > :not(:last-child)': {\n        marginBottom: theme.spacing(2),\n    },\n  },\n  header: {\n    textAlign: 'center',\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'center',\n    '& > :not(:last-child)': {\n        marginRight: theme.spacing(3),\n    },\n  }\n}));\n\ninterface CurrentTaskProps {\n    currentTask: ITask | null;\n    handleStopTimerById(): void;\n    handleStartTimerById(): void;\n    activeTimer: ITimerecord | null;\n}\n\nconst CurrentTask: FC<CurrentTaskProps> = ({ currentTask, handleStopTimerById, handleStartTimerById, activeTimer }) => {\n    const classes = useStyles()\n\n    const [isStartedTimer, setIsStartedTimer] = useState<boolean>(false)\n    const [shouldRefreshTimer, setShouldRefreshTimer] = useState<boolean>(false)\n\n    const handleStartButtonClick = useCallback(\n        () => {\n            const isRunningAnotherTimer = activeTimer && currentTask?.id !== activeTimer?.task?.id\n            if (isRunningAnotherTimer) {\n                setShouldRefreshTimer(true)\n            }\n            setIsStartedTimer(true)\n            handleStartTimerById();\n        },\n        [setIsStartedTimer, handleStartTimerById, activeTimer, currentTask],\n    )\n\n    const handleStopButtonClick = useCallback(\n        () => {\n            setIsStartedTimer(false)\n            handleStopTimerById();\n        },\n        [setIsStartedTimer, handleStopTimerById],\n    )\n\n    if (!currentTask) {\n        return (\n            <Card className={classes.root}>\n                <Typography className={classes.header}>Please, select task</Typography>\n            </Card>\n        )\n    }\n\n    const { name, timerecords, taskTotalTimespent, id } = currentTask\n\n    const isCurrentTask = id === activeTimer?.task?.id\n    const isStopButtonDisabled = !isCurrentTask || !activeTimer?.running\n    const isStartButtonDisabled = !isStopButtonDisabled\n\n    return (\n        <Card className={classes.root}>\n            <Typography className={classes.header}>{name}</Typography>\n            <Timer\n                isStartedTimer={isStartedTimer}\n                isCurrentTask={isCurrentTask}\n                shouldRefreshTimer={shouldRefreshTimer}\n                setShouldRefreshTimer={setShouldRefreshTimer}\n            />\n            <Grid className={classes.buttons}>\n                <Button\n                    onClick={handleStartButtonClick}\n                    variant=\"outlined\"\n                    disabled={isStartButtonDisabled}\n                >Start Timer</Button>\n                <Button\n                    onClick={handleStopButtonClick}\n                    variant=\"outlined\"\n                    disabled={isStopButtonDisabled}\n                >Stop Timer</Button>\n            </Grid>\n            <TimerecordList timerecords={timerecords} taskTotalTimespent={taskTotalTimespent} />\n        </Card>\n    )\n}\n\nexport default memo(CurrentTask)","import { FC, useState, useEffect, useCallback, useMemo } from 'react';\nimport { useQuery, useMutation } from '@apollo/client'\nimport MDSpinner from 'react-md-spinner';\nimport { useSnackbar } from 'notistack';\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport { getTasks, startTimer, stopTimer } from './query'\nimport TaskList from './components/TaskList'\nimport CurrentTask from './components/CurrentTask'\nimport { ITask, ITimerecord } from './interfaces'\ninterface ITasksQueryData {\n  tasks: ITask[];\n}\n\nconst App: FC = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const [tasks, setTasks] = useState<ITask[]>([])\n\n  const { data, loading, error: getTasksError, refetch } = useQuery<ITasksQueryData>(getTasks)\n\n  const [startTimerById, { error: startTimerError }] = useMutation(startTimer)\n  const [stopTimerById, { error: stopTimerError }] = useMutation(stopTimer)\n\n  useEffect(() => {\n    data && setTasks(data.tasks)\n  }, [data])\n\n  useEffect(() => {\n    const error = getTasksError || startTimerError || stopTimerError\n    error && enqueueSnackbar((error as Error).message, { variant: \"error\"})\n  }, [getTasksError, startTimerError, stopTimerError, enqueueSnackbar])\n\n  const [currentTaskId, setCurrentTaskId] = useState<string>('')\n\n  const currentTask = useMemo(() => tasks.find(task => task.id === currentTaskId) || null , [currentTaskId, tasks])\n\n  const [activeTimer, setActiveTimer] = useState<ITimerecord | null>(null)\n\n  const handleStartTimerById = useCallback(() => {\n    startTimerById({\n      variables: {\n        input: {\n          taskid: currentTaskId,\n        }\n      }\n    }).then(({ data }) => {\n      activeTimer && refetch();\n      setActiveTimer(data?.startTimerecord);\n    })\n  }, [currentTaskId, startTimerById, activeTimer, refetch])\n\n  const handleStopTimerById = useCallback(() => {\n    stopTimerById({\n      variables: {\n        input: {\n          taskid: currentTaskId,\n        }\n      }\n    }).then(({ data }) => {\n      setActiveTimer(null)\n      refetch()\n    })\n  }, [currentTaskId, stopTimerById, refetch])\n\n  return (\n    <Box p={4}>\n      <Grid container spacing={2}>\n        <Grid item xs={6}>\n          <TaskList\n            tasks={tasks}\n            setCurrentTaskId={setCurrentTaskId}\n            currentTaskId={currentTaskId}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <CurrentTask\n            currentTask={currentTask}\n            handleStopTimerById={handleStopTimerById}\n            handleStartTimerById={handleStartTimerById}\n            activeTimer={activeTimer}\n          />\n        </Grid>\n      </Grid>\n      {loading && <MDSpinner style={{ position: \"absolute\", top: \"50%\", left: \"50%\" }} />}\n    </Box>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client'\nimport { SnackbarProvider } from 'notistack'\nimport App from './App';\nimport './index.css'\n\nconst client = new ApolloClient({\n  uri: `${process.env.REACT_APP_URI}`,\n  headers: {\n    Authorization: `${process.env.REACT_APP_AUTH}`,\n  },\n  cache: new InMemoryCache()\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <SnackbarProvider maxSnack={3}>\n        <App />\n      </SnackbarProvider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}